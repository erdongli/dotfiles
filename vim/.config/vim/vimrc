" xdg
set runtimepath+=$XDG_DATA_HOME/vim
set packpath+=$XDG_DATA_HOME/vim,$XDG_DATA_HOME/vim/after
set backupdir=$XDG_STATE_HOME/vim/backup
set directory=$XDG_STATE_HOME/vim/swap
set viewdir=$XDG_STATE_HOME/vim/view
set undodir=$XDG_STATE_HOME/vim/undo
set viminfofile=$XDG_STATE_HOME/vim/viminfo

set nocompatible                      " disable compatible mode

set tabstop=2                         " tab width
set shiftwidth=2                      " indent width
set list                              " visiblize tabs
set listchars=tab:.\ ,trail:.         " tab => spaces set list
set expandtab                         " tab => spaces

set number                            " show line number
set ruler                             " show cursor status
set cursorline                        " highlight current line
set showcmd                           " show commands
set showmatch                         " match parentheses

set clipboard^=unnamed,unnamedplus    " allow copy-paste everywhere

set backspace=indent,eol,start

set background=dark
autocmd vimenter * ++nested colorscheme gruvbox

syntax on
filetype plugin indent on

" nerdtree
autocmd VimEnter * NERDTree | wincmd p
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif

let NERDTreeMinimalUI = 1

" vim-gitgutter
set updatetime=100

function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}

" vim-airline
let g:airline_powerline_fonts = 1

" vim-lsp
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
  nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

if executable('glpls')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'go-lang',
      \ 'cmd': {server_info->['gopls']},
      \ 'whitelist': ['go'],
      \ })
endif

if executable('pylsp')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'pylsp',
      \ 'cmd': {server_info->['pylsp']},
      \ 'allowlist': ['python'],
      \ })
endif

if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'Rust Language Server',
      \ 'cmd': {server_info->['rust-analyzer']},
      \ 'whitelist': ['rust'],
      \ })
endif

" asyncomplete
" tab completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" force refresh completion
imap <c-space> <Plug>(asyncomplete_force_refresh)

" no auto popup
let g:asyncomplete_auto_popup = 0

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" vim-go
"let g:go_fmt_autosave = 1
"let g:go_fmt_command = "goimports"
"let g:go_autodetect_gopath = 1
"let g:go_list_type = "quickfix"
"
"let g:go_highlight_types = 1
"let g:go_highlight_fields = 1
"let g:go_highlight_functions = 1
"let g:go_highlight_methods = 1
"let g:go_highlight_extra_types = 1
"let g:go_highlight_generate_tags = 1
"
"let g:go_template_autocreate = 0
"
"let g:go_list_height = 30
